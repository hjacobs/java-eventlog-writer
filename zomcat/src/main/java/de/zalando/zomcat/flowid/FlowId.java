package de.zalando.zomcat.flowid;

import java.util.UUID;

import org.apache.commons.codec.binary.Base64;

import org.apache.log4j.Logger;
import org.apache.log4j.NDC;

import de.zalando.utils.UUIDConverter;

/**
 * FlowId management. A flowId can be inserted into/removed from the diagnostic context of log4j.
 *
 * @author  wolters
 */
public abstract class FlowId {
    private static final Logger LOG = Logger.getLogger(FlowId.class);

    /**
     * generate a new, totally random (UUID-based) Flow-ID.
     *
     * @return  22-character Flow-ID starting with "R"
     */
    public static String generateFlowId() {
        return generateFlowIdWithPayload(FlowIdType.RANDOM, null, null, null);
    }

    /**
     * generate a new Flow-ID with payload information (frontend request info).
     *
     * @param   sessionId      user's session (or pession) either as 32-char Hex or Base35
     * @param   remoteAddress  remote IP address in dotted decimal format (e.g. 127.0.0.1)
     * @param   userId         user's id or suffix of customer number (last 9 digits as integer)
     *
     * @return  22-character Flow-ID starting with "F" or "U" (if logged-in)
     */
    public static String generateFlowIdWithPayload(final FlowIdType type, final String sessionId,
            final String remoteAddress, final Integer userId) {
        final byte[] bytes = UUIDConverter.getBytes(UUID.randomUUID());

        bytes[0] = type.getCharCode();

        return Base64.encodeBase64URLSafeString(type.getInjector().inject(bytes,
                    new FlowIdPayload(sessionId, remoteAddress, userId)));
    }

    public static String generateFlowIdWithPayload(final String sessionId, final String remoteAddress,
            final Integer userId) {
        return generateFlowIdWithPayload(userId == null ? FlowIdType.FRONTEND : FlowIdType.USER, sessionId,
                remoteAddress, userId);
    }

    /**
     * extract request information from a Flow-ID generated by generateFlowIdWithPayload().
     *
     * @param   flowId  22-character Flow-ID
     *
     * @return  extracted request information (session prefix, remote IP, user ID)
     */
    public static FlowIdPayload extractPayload(final String flowId) {
        if (flowId == null) {
            return null;
        }

        final byte[] bytes = Base64.decodeBase64(flowId);

        final FlowIdType type = FlowIdType.valueOf(bytes[0]);

        if (!type.hasInjectedData()) {
            return null;
        }

        return type.getInjector().extract(bytes);
    }

    public static void generateAndPushFlowId() {
        pushFlowId(generateFlowId());
    }

    public static String generateAndPushFlowIdWithPayload(final FlowIdType jobType) {
        return generateFlowIdWithPayload(jobType, null, null, null);
    }

    public static void generateAndPushFlowIdWithPayload(final FlowIdType type, final String sessionId,
            final String remoteAddress, final Integer userId) {
        pushFlowId(generateFlowIdWithPayload(type, sessionId, remoteAddress, userId));
    }

    public static void generateAndPushFlowIdWithPayload(final String sessionId, final String remoteAddress,
            final Integer userId) {
        pushFlowId(generateFlowIdWithPayload(FlowIdType.USER, sessionId, remoteAddress, userId));
    }

    public static void pushFlowId(final String flowId) {
        if (LOG.isTraceEnabled()) {
            LOG.trace("adding flowId: " + flowId);
        }

        NDC.push(flowId);
    }

    public static String popFlowId() {
        final String ret = NDC.pop();
        if (LOG.isTraceEnabled()) {
            LOG.trace("removed flowId: " + ret);
        }

        if (NDC.getDepth() == 0) {
            NDC.remove();
            if (LOG.isTraceEnabled()) {
                LOG.trace("cleaned NDC context. Last known flowId: " + ret);
            }
        }

        return ret;
    }

    public static String peekFlowId() {
        return NDC.peek();
    }

    public static void clear() {
        NDC.remove();
    }
}
