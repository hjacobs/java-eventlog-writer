package de.zalando.zomcat.flowid;

import java.net.InetAddress;

import java.util.UUID;

import org.apache.commons.codec.binary.Base64;

import org.apache.log4j.Logger;
import org.apache.log4j.NDC;

import de.zalando.utils.UUIDConverter;

/**
 * FlowId managemenent. A flowId can be inserted into/removed from the diagnostic context of log4j.
 *
 * @author  wolters
 */
public abstract class FlowId {
    private static final Logger LOG = Logger.getLogger(FlowId.class);

    /**
     * generate a new, totally random (UUID-based) Flow-ID.
     *
     * @return  22-character Flow-ID starting with "R"
     */
    public static String generateFlowId() {
        byte[] bytes = UUIDConverter.getBytes(UUID.randomUUID());
        bytes[0] = 71; // becomes "R" (for random) in Base64
        return Base64.encodeBase64URLSafeString(bytes);
    }

    /**
     * generate a new Flow-ID with payload information (frontend request info).
     *
     * @param   sessionId      user's session (or pession) either as 32-char Hex or Base35
     * @param   remoteAddress  remote IP address in dotted decimal format (e.g. 127.0.0.1)
     * @param   userId         user's id or suffix of customer number (last 9 digits as integer)
     *
     * @return  22-character Flow-ID starting with "F" or "U" (if logged-in)
     */
    public static String generateFlowIdWithPayload(final String sessionId, final String remoteAddress,
            final Integer userId) {
        byte[] bytes = UUIDConverter.getBytes(UUID.randomUUID());
        if (userId != null) {
            bytes[0] = 80; // becomes "U" (for user) in Base64
        } else {
            bytes[0] = 23; // becomes "F" (for frontend) in Base64
        }

        try {
            byte[] sessionBytes = UUIDConverter.getBytes(sessionId);
            System.arraycopy(sessionBytes, 0, bytes, 1, 5);

            InetAddress inet = InetAddress.getByName(remoteAddress);
            System.arraycopy(inet.getAddress(), 0, bytes, 6, 4);
            if (userId != null) {
                bytes[10] = (byte) (userId >>> 24);
                bytes[11] = (byte) (userId >>> 16);
                bytes[12] = (byte) (userId >>> 8);
                bytes[13] = userId.byteValue();
            } else {
                bytes[10] = 0;
                bytes[11] = 0;
                bytes[12] = 0;
                bytes[13] = 0;
            }

        } catch (final Exception e) {
            LOG.warn("Could not generate Flow-ID for frontend session " + sessionId + " from IP " + remoteAddress
                    + " for user " + userId, e);
        }

        return Base64.encodeBase64URLSafeString(bytes);
    }

    /**
     * extract request information from a Flow-ID generated by generateFlowIdWithPayload().
     *
     * @param   flowId  22-character Flow-ID (starting with either F or U)
     *
     * @return  extracted request information (session prefix, remote IP, user ID)
     */
    public static FlowIdPayload extractPayload(final String flowId) {
        if (!flowId.startsWith("F") && !flowId.startsWith("U")) {
            return null;
        }

        try {
            byte[] bytes = Base64.decodeBase64(flowId);
            byte[] sessionBytes = new byte[5];
            System.arraycopy(bytes, 1, sessionBytes, 0, 5);

            byte[] inetBytes = new byte[4];
            System.arraycopy(bytes, 6, inetBytes, 0, 4);

            InetAddress inet = InetAddress.getByAddress(inetBytes);
            Integer userId = 0;
            userId |= bytes[10] & 0xFF;
            userId <<= 8;
            userId |= bytes[11] & 0xFF;
            userId <<= 8;
            userId |= bytes[12] & 0xFF;
            userId <<= 8;
            userId |= bytes[13] & 0xFF;
            if (userId <= 0) {
                userId = null;
            }

            return new FlowIdPayload(UUIDConverter.getHexString(sessionBytes), inet.getHostAddress(), userId);
        } catch (final Exception e) {
            LOG.warn("Could not extract session prefix and remote address from Flow-ID " + flowId, e);
        }

        return null;
    }

    public static void generateAndPushFlowId() {
        pushFlowId(generateFlowId());
    }

    public static void generateAndPushFlowIdWithPayload(final String sessionId, final String remoteAddress,
            final Integer userId) {
        pushFlowId(generateFlowIdWithPayload(sessionId, remoteAddress, userId));
    }

    public static void pushFlowId(final String flowId) {
        if (LOG.isTraceEnabled()) {
            LOG.trace("adding flowId: " + flowId);
        }

        NDC.push(flowId);
    }

    public static String popFlowId() {
        final String ret = NDC.pop();
        if (LOG.isTraceEnabled()) {
            LOG.trace("removed flowId: " + ret);
        }

        if (NDC.getDepth() == 0) {
            NDC.remove();
            if (LOG.isTraceEnabled()) {
                LOG.trace("cleaned NDC context. Last known flowId: " + ret);
            }
        }

        return ret;
    }

    public static String peekFlowId() {
        return NDC.peek();
    }

    public static void clear() {
        NDC.remove();
    }
}
